import asyncio
import logging
import re
import group_games
# from config_reader import config
from my_token import TOKEN
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command,CommandObject, CommandStart
from aiogram.types import Message,FSInputFile, URLInputFile, BufferedInputFile, LinkPreviewOptions
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.utils.markdown import hide_link





logging.basicConfig(level = logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher()
dp.include_routers(group_games.router)
dp["started_at"] = datetime.now().strftime("%Y-%m-%d %H:%M")


@dp.message(Command('start'))
async def cmd_hello(message: Message):
    
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ, <b>{message.from_user.full_name}</b>",
            parse_mode=ParseMode.HTML
    
    )
    kb = [
        [types.KeyboardButton(text="commands")],
        [types.KeyboardButton(text="help")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–∞—á–∏"
    )
    await message.answer("–≤—ã–±–∏—Ä–∏—Ç–µ 'commands' —á—Ç–æ –±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç", reply_markup=keyboard ),
    await message.answer('–≤—ã–±–∏—Ä–∏—Ç–µ "help" —á—Ç–æ –±—ã –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã', reply_markup=keyboard)







@dp.message(CommandStart(
    deep_link=True,
    magic=F.args.regexp(re.compile(r'book_(\d+)'))
))
async def cmd_start_book(
        message: Message,
        command: CommandObject
):
    book_number = command.args.split("_")[1]
    await message.answer(f"Sending book ‚Ññ{book_number}")






@dp.message(Command('images'))
async def upload_photo(message: Message):
    # –°—é–¥–∞ –±—É–¥–µ–º –ø–æ–º–µ—â–∞—Ç—å file_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∏–º–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
    file_ids = []


    with open("buffer_emulation.jpg", "rb") as image_from_buffer:
        result = await message.answer_photo(
            BufferedInputFile(
                image_from_buffer.read(),
                filename="image from buffer.jpg"
            ),
            caption="–Ω–∞—à —Å–ª–æ–Ω—è—Ä–∞"
        )
        file_ids.append(result.photo[-1].file_id)




    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    image_from_pc = FSInputFile("image_from_pc.jpg")
    result = await message.answer_photo(
        image_from_pc,
        caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ"
    )
    file_ids.append(result.photo[-1].file_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ
    image_from_url = URLInputFile("https://picsum.photos/seed/groosha/400/300")
    result = await message.answer_photo(
        image_from_url,
        caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ"
    )
    file_ids.append(result.photo[-1].file_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n"+"\n".join(file_ids))





@dp.message(Command("link"))
async def cmd_links(message: Message):
    links_text = (
        "https://eyes.nasa.gov/apps/solar-system/#/home"
        "\n"
        "https://t.me/telegram"
    )
    options_3 = LinkPreviewOptions(
        url="https://eyes.nasa.gov/apps/solar-system/#/home",
        prefer_large_media=True
    )
    await message.answer(
        f"–ë–æ–ª—å—à–æ–µ –ø—Ä–µ–≤—å—é\n{links_text}",
        link_preview_options=options_3
    )





from aiogram.utils.markdown import hide_link

@dp.message(Command("hidden_link"))
async def cmd_hidden_link(message: Message):
    await message.answer(
        f"{hide_link('https://memepedia.ru/bobr-kurva/')}"
        f"–±–æ–±–µ—Ä –∫—É—Ä–≤–∞: *—Å—É—â–µ—Å—Ç–≤—É–µ—Ç*\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: *–Ω–µ –∑–Ω–∞—é—Ç –º–µ–º*\n"
        f"–±–æ–±–µ—Ä:"
    )




@dp.message(Command("gif"))
async def send_gif(message: Message):
    await message.answer_animation(
        animation="<file_id –≥–∏—Ñ–∫–∏>",
        caption="–Ø —Å–µ–≥–æ–¥–Ω—è:",
        show_caption_above_media=True
    )






@dp.message(F.text.lower() == "commands")
async def with_puree(message: types.Message):
    await message.answer('–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã,\n —Ç–∞–∫–∏–µ –∫–∞–∫: images - –≤—ã–≤–æ–¥ –∫–∞—Ä—Ç–∏–Ω–∫–∏,\n reply_builder - –≤—ã–±–æ—Ä —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 9,\n dice - –ø–æ–¥–±—Ä–æ—Å –∫—É–±–∏–∫–∞,\n info  - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–æ–≥–¥–∞ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –±–æ—Ç,\n link - –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ,\n hidden_link -  —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å—Å—ã–ª–∫–∏,\n random - –≤—ã–≤–æ–¥–∏—Ç—Å—è –ª—é–±–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 - 1000000')

@dp.message(F.text.lower() == "help")
async def without_puree(message: types.Message):
    await message.answer("–≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤–≤–æ–¥—è—Ç—Å—è —á–µ—Ä–µ–∑ '/', –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ")












@dp.message(Command("reply_builder"))
async def reply_builder(message: types.Message):
    builder = ReplyKeyboardBuilder()
    for i in range(1, 10):
        builder.add(types.KeyboardButton(text=str(i)))
    builder.adjust(3)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9:",
        reply_markup=builder.as_markup(resize_keyboard=True),
    )
    kb = [
        [types.KeyboardButton(text="commands")],
        [types.KeyboardButton(text="help")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–∞—á–∏"
    )




@dp.message(F.text.lower() == "1")
async def without_puree(message: types.Message):
    await message.answer("–∞–±–æ–±–∞")

@dp.message(F.text.lower() == "2")
async def without_puree(message: types.Message):
    await message.answer("–±–æ–±–µ—Ä")

@dp.message(F.text.lower() == "3")
async def without_puree(message: types.Message):
    await message.answer("–∫–≤–∞–¥—Ä–æ–±–µ—Ä")

@dp.message(F.text.lower() == "4")
async def without_puree(message: types.Message):
    await message.answer("–ø–µ—Å")

@dp.message(F.text.lower() == "5")
async def without_puree(message: types.Message):
    await message.answer("–∫–æ—Ç")

@dp.message(F.text.lower() == "6")
async def without_puree(message: types.Message):
    await message.answer("—Å–ª–æ–Ω—è—Ä–∞")

@dp.message(F.text.lower() == "7")
async def without_puree(message: types.Message):
    await message.answer("—á–µ–±—É—Ä–µ–∫")

@dp.message(F.text.lower() == "8")
async def without_puree(message: types.Message):
    await message.answer("raw")

@dp.message(F.text.lower() == "9")
async def without_puree(message: types.Message):
    await message.answer("pipipypychek")


@dp.message(Command('answer'))
async def cmd_answer(message: types.Message):
    await message.answer("–ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
@dp.message(Command('reply'))
async def cmd_reply(message: types.Message):
    await message.reply("—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")

@dp.message(Command('dice'))
async def cmd_answer(message: types.Message):
    await message.answer_dice("emoji=üé≤")

@dp.message(Command("add_to_list"))
async def cmd_add_to_list(message: types.Message, mylist: list[int]):
    mylist.append(4)
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ —á–∏—Å–ª–æ 4")

@dp.message(Command("show_list"))
async def cmd_show_list(message: types.Message, mylist: list[int]):
    await message.answer(f"–í–∞—à —Å–ø–∏—Å–æ–∫: {mylist}")

@dp.message(Command("info"))
async def cmd_info(message: types.Message, started_at: str):
    await message.answer(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω {started_at}")




async def main():

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –≤—Ö–æ–¥—è—â–∏–µ
    # –î–∞, —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ —É –≤–∞—Å –ø–æ–ª–ª–∏–Ω–≥
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, mylist=[1, 2, 3])



if __name__ == "__main__":
    asyncio.run(main())